import pandas as pd

from imports import st, prediction_tuned, prediction_regular, y_test, models, df, choice, ohe_enc, scaler, \
    model_regular, model_tuned

# from category_encoders.one_hot import OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, PolynomialFeatures, OneHotEncoder
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score, roc_curve, \
    confusion_matrix
from sklearn.calibration import CalibratedClassifierCV

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

from sklearn.pipeline import Pipeline
from sklearn.compose import make_column_transformer


# from mlxtend.plotting import plot_confusion_matrix
# import matplotlib.pyplot as plt
# import seaborn as sn
# import altair as alt
# from sklearn.metrics import confusion_matrix

def get_metrics_score(y_test, y_pred) -> dict:
    accuracy = round(accuracy_score(y_test, y_pred), 4)
    precision = round(precision_score(y_test, y_pred), 4)
    recall = round(recall_score(y_test, y_pred), 4)
    f1 = round(f1_score(y_test, y_pred), 4)
    return {'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1}


def get_metrics_score_thr(threshold: float, best_thr: float, model_type: str = 'regular') -> tuple[dict, tuple]:
    pred_probability = prediction_regular if model_type == 'regular' else prediction_tuned
    y_thr = pred_probability > threshold
    y_best_thr = pred_probability > best_thr
    metrics = {'user': get_metrics_score(y_test, y_thr), 'best': get_metrics_score(y_test, y_best_thr)}
    y_thr_tuple = (y_thr, y_best_thr)
    return metrics, y_thr_tuple


def get_metrics(threshold: float, best_thr: float, model_type: str = 'regular') -> None:
    metrics, _ = get_metrics_score_thr(threshold=threshold, best_thr=best_thr, model_type=model_type)
    col1, col2, col3, col4 = st.columns(4)
    mets_name = list(metrics['user'].keys())
    pairs = zip(mets_name, [col1, col2, col3, col4])

    for mets, col in pairs:
        col.metric(mets, metrics['user'][mets], round((metrics['user'][mets] - metrics['best'][mets]), 4))


def draw_model_select() -> tuple[str, str, float]:
    st.write('–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞-–ë–∞–Ω–∫–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –µ–≥–æ '
             '–±—É–¥—É—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.')
    st.caption('–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ')
    model_name = st.radio(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å",
        [name.title() for name in models],
        captions=[(models[name]['name'] + ': ' + models[name]['params']) for name in models], horizontal=True)

    model_type = models[model_name.lower()]['type']
    best_thr = models[model_name.lower()]['best_thr']
    return model_name, model_type, best_thr


def draw_thrash_select(best_thr) -> float:
    st.divider()
    st.subheader('üéöÔ∏è –í—ã–±–æ—Ä –ø–æ—Ä–æ–≥–∞')
    st.caption('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∏—è–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
    st.write('')
    thr_prob = st.slider('–í—ã–±–µ—Ä–∏ –ø–æ—Ä–æ–≥ (—à–∫–∞–ª–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ '
                         '–æ—Ç 0 –¥–æ 1):', min_value=0, max_value=100, value=int(best_thr * 100), step=1)
    thr = round((thr_prob / 100), 2)
    st.write(
        "–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª–Ω–æ—Ç—ã –æ—Ö–≤–∞—Ç–∞, –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç",
        best_thr)
    st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Ä–æ–≥", thr)
    return thr


def draw_metrics(best_thr, thr, model_type) -> None:
    st.write('')
    st.write(f'–ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ—Ä–æ–≥–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º:')
    get_metrics(threshold=thr, best_thr=best_thr, model_type=model_type)
    st.caption(
        '–ù–æ —á—Ç–æ –∑–Ω–∞—á–∞—Ç —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ? –ü–æ–∫–∞–∂–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è –Ω–∞—à–µ–π –∑–∞–¥–∞—á–∏')


def draw_confusion_matrix(threshold, best_thr, model_type) -> None:
    _, y_thr_tuple = get_metrics_score_thr(threshold=threshold, best_thr=best_thr, model_type=model_type)

    st.divider()
    st.subheader('ü´∞ –í–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –∑–∞—Ç—Ä–∞—Ç—ã –ë–∞–Ω–∫–∞')

    col1, col2 = st.columns(2)
    pairs = zip([0, 1], ['—Ç–æ–±–æ–π', '–Ω–∞–º–∏'], [col1, col2])

    for thr_num, me, col in pairs:
        matrix = pd.DataFrame(confusion_matrix(y_test, y_thr_tuple[thr_num]))
        st.write(f'–≠—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–≥–æ {me} –ø–æ—Ä–æ–≥–∞:')
        st.dataframe(matrix.style.background_gradient(cmap='YlGnBu', axis=None))
        st.write(f'–ó–¥–µ—Å—å —É–¥–∞—Å—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è {matrix[1][1]} –∫–ª–∏–µ–Ω—Ç–∞–º, –Ω–æ –º—ã –Ω–µ —Å–¥–µ–ª–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ '
                 f'–∑–≤–æ–Ω–∫–∏ {matrix[0][1]} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º')
    matrix_user = confusion_matrix(y_test, y_thr_tuple[0])[1][1] + confusion_matrix(y_test, y_thr_tuple[0])[0][1]
    matrix_tuned = confusion_matrix(y_test, y_thr_tuple[1])[1][1] + confusion_matrix(y_test, y_thr_tuple[1])[0][1]
    delta = round(matrix_tuned / matrix_user, 1)
    st.write(f'–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —Ç–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: –Ω–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è '
             f'–∑–∞—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä –ë–∞–Ω–∫–∞ –æ–±–∑–≤–∞–Ω–∏–≤–∞—Ç—å –≤ {delta} —Ä–∞–∑ –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥—ë—Ç—Å—è —Å—á–∏—Ç–∞—Ç—å, '
             f'—á—Ç–æ –≤—ã–≥–æ–¥–µ–µ: —É–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–¥–æ–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥, –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç '
             f'—É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä—É')


def draw_single_forecast(threshold, best_thr, model_type) -> None:
    st.divider()
    st.subheader('1Ô∏è‚É£ –í–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑')

    X = df.drop(columns=['TARGET', 'AGREEMENT_RK']).reset_index(drop=True).set_index('ID')
    st.write('')
    result = st.button('–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –Ω–µ–º—É')
    if result:
        ind = choice(X.index.tolist())
        single_df = X.loc[ind].to_frame().T
    else:
        single_df = X.iloc[0].to_frame().T

    st.dataframe(single_df)

    df_new = pd.DataFrame(ohe_enc.transform(single_df))
    df_new = pd.DataFrame(scaler.transform(df_new), columns=df_new.columns, index=df_new.index)

    # st.dataframe(df_new)

    if model_type == 'regular':
        predict_model = model_regular
        single_pred_positive = predict_model.predict_proba(single_df)[:, 1][0]
    else:
        predict_model = model_tuned
        single_pred_positive = predict_model.predict_proba(df_new)[:, 1][0]

    st.write('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–æ–¥–µ–ª–∏:', round(single_pred_positive, 2))
    text_thr = '–¶–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –ø–æ—Ä–æ–≥–∞:'
    if single_pred_positive > threshold:
        st.write(text_thr, ':green[–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å]')
    else:
        st.write(text_thr, ':red[–Ω–µ —Ç—Ä–∞—Ç—å –≤—Ä–µ–º—è]')
    text_best_thr = '–¶–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞:'
    if single_pred_positive > best_thr:
        st.write(text_best_thr, ':green[–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å]')
    else:
        st.write(text_best_thr, ':red[–Ω–µ —Ç—Ä–∞—Ç—å –≤—Ä–µ–º—è]')
