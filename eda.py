from imports import st, pd, px, df, charts_dict, charts_texts, pie_dict, pie_texts, numeric_columns


def draw_barchart():
    st.divider()

    columns = st.radio(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã:",
        [rus_names for rus_names in charts_dict.keys()]
    )

    st.subheader(f'üé¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—ë–º—â–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{columns}"')
    st.bar_chart(df, x=charts_dict[columns], y='ID')
    st.caption(charts_texts[columns])
    # with st.expander('–ü—Ä–æ—á–µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'):
    #     st.write(expanders[columns])


def draw_pie():
    st.divider()

    columns = st.radio(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã:",
        [rus_names for rus_names in pie_dict.keys()]
    )
    st.subheader(f'üç∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—ë–º—â–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{columns}"')

    category = pie_dict[columns]
    data_frame = pd.DataFrame(df[category].value_counts(), columns=['count'])
    fig = px.pie(data_frame=data_frame, values='count', names=data_frame.index)
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    st.caption(pie_texts[columns])


def num_distribution():
    st.divider()
    st.subheader('üî¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤')
    st.dataframe(
        df.drop(
            columns=numeric_columns
        )
        .describe()
    )


def categorical_distribution():
    st.divider()
    st.subheader('üìå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤')
    st.dataframe(df.describe(include='object'))


def nun_distribution():
    st.divider()
    st.subheader('ü´ó –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö')
    st.dataframe(df.isna().sum())


def pirson_correlation():
    st.divider()
    st.subheader('üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ü–∏—Ä—Å–æ–Ω–∞')
    st.dataframe(df.select_dtypes('float64').corr().style.background_gradient(cmap='coolwarm'))
