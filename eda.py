"""
Module responsible for content and display of the EDA tab in streamlit application
–ú–æ–¥—É–ª—å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–ê–Ω–∞–ª–∏–∑" –≤ streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
"""

from imports import (st, pd, px, df, charts_dict, charts_texts, pie_dict, pie_texts, numeric_columns, target_distr_dict,
                     target_distr_texts)


def draw_barchart():
    """
    Controls the block that draws bar charts for individual data categories
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–ª–æ–∫–∞, —Ä–∏—Å—É—é—â–µ–≥–æ –±–∞—Ä-—á–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö
    """
    st.divider()

    columns = st.radio(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã:",
        [rus_names for rus_names in charts_dict.keys()]
    )

    st.subheader(f'üé¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—ë–º—â–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{columns}"')
    st.bar_chart(df, x=charts_dict[columns], y='ID')
    st.caption(charts_texts[columns])
    # with st.expander('–ü—Ä–æ—á–µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'):
    #     st.write(expanders[columns])


def draw_pie():
    """
    Controls the block that draws a pie chart for individual data categories
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–ª–æ–∫–∞, —Ä–∏—Å—É—é—â–µ–≥–æ –∫—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö
    """
    st.divider()

    columns = st.radio(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã:",
        [rus_names for rus_names in pie_dict.keys()]
    )
    st.subheader(f'üç∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—ë–º—â–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{columns}"')

    category = pie_dict[columns]
    data_frame = pd.DataFrame(df[category].value_counts(), columns=['count'])
    fig = px.pie(data_frame=data_frame, values='count', names=data_frame.index)
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    st.caption(pie_texts[columns])


def draw_num_distribution():
    """
    Controls the display of a block drawing the distribution of numeric columns
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–ª–æ–∫–∞, —Ä–∏—Å—É—é—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    """
    st.divider()
    st.subheader('üî¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤')
    st.dataframe(
        df.drop(
            columns=numeric_columns
        )
        .describe()
    )


def draw_categorical_distribution():
    """
    Controls the display of a block drawing the distribution of categorical columns
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–ª–æ–∫–∞, —Ä–∏—Å—É—é—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    """
    st.subheader('üìå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤')
    st.dataframe(df.describe(include='object'))
    st.caption(
        '–õ—é–±–æ–ø—ã—Ç–Ω–æ –±—ã–ª–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–∞—ë–º—â–∏–∫–∞: 36 –ª–µ—Ç–Ω–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–∑ –ö–µ–º–µ—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å '
        '—Å–µ–º–µ–π–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º –¥–æ 20 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π, –∏–º–µ—é—â–∏–π –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ –±–µ—Ä—É—â–∏–π –º–∏–∫—Ä–æ–∑–∞–π–º –≤ 15 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –Ω–∞ '
        '8 –º–µ—Å—è—Ü–µ–≤.'
    )


def draw_nun_distribution():
    """
    Controls the display of the block showing missing columns
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–ª–æ–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
    """
    st.divider()
    st.subheader('ü´ó –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö')
    st.dataframe(df.isna().sum())
    st.caption(
        '–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤, —ç—Ç–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–æ —Å–∞–º–æ–π —Å–±–æ—Ä–∫–æ–π –¥–∞—Ç–∞—Å–µ—Ç–∞, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–æ –≤ –Ω–æ—É—Ç–±—É–∫–µ. –ù—É –≤–æ—Ç, '
        '–∑–∞—á–µ–º-—Ç–æ –µ—â—ë —Ä–∞–∑ —É–±–µ–¥–∏–ª–∏—Å—å –≤ —ç—Ç–æ–º.'
    )


def draw_pearson_correlation():
    """
    Controls the display of the block that builds the Pearson correlation
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–ª–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –ü–∏—Ä—Å–æ–Ω–∞
    """

    st.divider()
    st.subheader('üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ü–∏—Ä—Å–æ–Ω–∞')
    st.dataframe(df.select_dtypes('float64').corr().style.background_gradient(cmap='coolwarm'))
    st.caption(
        '–ï—Å—Ç—å —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–æ—Ö–æ–¥–æ–º –∑–∞—ë–º—â–∏–∫–∞, –µ–≥–æ –ø–µ—Ä–≤—ã–º –ø–ª–∞—Ç–µ–∂–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º –∫—Ä–µ–¥–∏—Ç–∞, '
        '–∏ —ç—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ. –ù–æ –≤–æ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç '
        '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∫–ª—é—á–µ–≤—ã–º–∏ "—Ä–∞–±–æ—á–∏–º–∏" —Ñ–∏—á–∞–º–∏ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç–∞–Ω—É—Ç'
        ' –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏'
    )


def draw_target_correlation():
    """
    Controls the display of the block that plots the scatter plots of the target variable
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–ª–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    """
    st.divider()

    columns = st.radio(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è:",
        [rus_names for rus_names in target_distr_dict.keys()]
    )
    st.subheader(
        f'üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∑–∞—ë–º—â–∏–∫–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{columns}"')

    category = target_distr_dict[columns]
    st.scatter_chart(df[[category, 'AGE', "TARGET"]], x=category, y='AGE', color='TARGET', use_container_width=True)
    st.caption(target_distr_texts[columns])
